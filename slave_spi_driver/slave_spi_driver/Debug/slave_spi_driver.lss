
slave_spi_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000560  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000560  000005d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001415  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007da  00000000  00000000  00001b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000825  00000000  00000000  000022ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  00002b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bf  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000af8  00000000  00000000  0000311f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003c17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 96 01 	call	0x32c	; 0x32c <main>
  7a:	0c 94 ae 02 	jmp	0x55c	; 0x55c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <hlcd_sendCmd>:
}


/*This function is responsible for sending 8-bits command for the LCD module*/
static void hlcd_sendCmd(u8_t command) /*0b 1110   -> EN   0100*/
{
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
	/*send command*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_RS,LOW);
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	62 e0       	ldi	r22, 0x02	; 2
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*Enable writing operation*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_RW,LOW);
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	64 e0       	ldi	r22, 0x04	; 4
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*sending command High byte*/
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN4,GET_BIT(command,4));
  9a:	c4 fb       	bst	r28, 4
  9c:	44 27       	eor	r20, r20
  9e:	40 f9       	bld	r20, 0
  a0:	60 e1       	ldi	r22, 0x10	; 16
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN5,GET_BIT(command,5));
  a8:	c5 fb       	bst	r28, 5
  aa:	44 27       	eor	r20, r20
  ac:	40 f9       	bld	r20, 0
  ae:	60 e2       	ldi	r22, 0x20	; 32
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN6,GET_BIT(command,6));
  b6:	c6 fb       	bst	r28, 6
  b8:	44 27       	eor	r20, r20
  ba:	40 f9       	bld	r20, 0
  bc:	60 e4       	ldi	r22, 0x40	; 64
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN7,GET_BIT(command,7));
  c4:	4c 2f       	mov	r20, r28
  c6:	44 1f       	adc	r20, r20
  c8:	44 27       	eor	r20, r20
  ca:	44 1f       	adc	r20, r20
  cc:	60 e8       	ldi	r22, 0x80	; 128
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*trigger enable pin*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,LOW);
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	68 e0       	ldi	r22, 0x08	; 8
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	8a e6       	ldi	r24, 0x6A	; 106
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <hlcd_sendCmd+0x5e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <hlcd_sendCmd+0x64>
	_delay_us(20);
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,HIGH);
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	68 e0       	ldi	r22, 0x08	; 8
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*sending command low byte*/
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN4,GET_BIT(command,0));
  f0:	4c 2f       	mov	r20, r28
  f2:	41 70       	andi	r20, 0x01	; 1
  f4:	60 e1       	ldi	r22, 0x10	; 16
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN5,GET_BIT(command,1));
  fc:	c1 fb       	bst	r28, 1
  fe:	44 27       	eor	r20, r20
 100:	40 f9       	bld	r20, 0
 102:	60 e2       	ldi	r22, 0x20	; 32
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN6,GET_BIT(command,2));
 10a:	c2 fb       	bst	r28, 2
 10c:	44 27       	eor	r20, r20
 10e:	40 f9       	bld	r20, 0
 110:	60 e4       	ldi	r22, 0x40	; 64
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN7,GET_BIT(command,3));
 118:	c3 fb       	bst	r28, 3
 11a:	44 27       	eor	r20, r20
 11c:	40 f9       	bld	r20, 0
 11e:	60 e8       	ldi	r22, 0x80	; 128
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*trigger enable pin*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,LOW);
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	68 e0       	ldi	r22, 0x08	; 8
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
 130:	8a e6       	ldi	r24, 0x6A	; 106
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <hlcd_sendCmd+0xb0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <hlcd_sendCmd+0xb6>
	_delay_us(20);
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,HIGH);
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	68 e0       	ldi	r22, 0x08	; 8
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	
	
	/*return from this function*/
	return;
}
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <hlcd_sendData>:
/*This function is responsible for sending 8-bits command for the LCD module*/
static void hlcd_sendCmd(u8_t command);

/*This function is responsible for sending 8-bits data for the LCD module*/
static void hlcd_sendData(u8_t Data)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	/*sending display data*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_RS,HIGH);
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	62 e0       	ldi	r22, 0x02	; 2
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*Enable writing operation*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_RW,LOW);
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	64 e0       	ldi	r22, 0x04	; 4
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*sending data High byte*/
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN4,GET_BIT(Data,4));
 15e:	c4 fb       	bst	r28, 4
 160:	44 27       	eor	r20, r20
 162:	40 f9       	bld	r20, 0
 164:	60 e1       	ldi	r22, 0x10	; 16
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN5,GET_BIT(Data,5));
 16c:	c5 fb       	bst	r28, 5
 16e:	44 27       	eor	r20, r20
 170:	40 f9       	bld	r20, 0
 172:	60 e2       	ldi	r22, 0x20	; 32
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN6,GET_BIT(Data,6));
 17a:	c6 fb       	bst	r28, 6
 17c:	44 27       	eor	r20, r20
 17e:	40 f9       	bld	r20, 0
 180:	60 e4       	ldi	r22, 0x40	; 64
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN7,GET_BIT(Data,7));
 188:	4c 2f       	mov	r20, r28
 18a:	44 1f       	adc	r20, r20
 18c:	44 27       	eor	r20, r20
 18e:	44 1f       	adc	r20, r20
 190:	60 e8       	ldi	r22, 0x80	; 128
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*trigger enable pin*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,LOW);
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	68 e0       	ldi	r22, 0x08	; 8
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
 1a2:	87 ec       	ldi	r24, 0xC7	; 199
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <hlcd_sendData+0x60>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <hlcd_sendData+0x66>
 1ac:	00 00       	nop
	_delay_us(50);
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,HIGH);
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	68 e0       	ldi	r22, 0x08	; 8
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*sending data low byte*/
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN4,GET_BIT(Data,0));
 1b8:	4c 2f       	mov	r20, r28
 1ba:	41 70       	andi	r20, 0x01	; 1
 1bc:	60 e1       	ldi	r22, 0x10	; 16
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN5,GET_BIT(Data,1));
 1c4:	c1 fb       	bst	r28, 1
 1c6:	44 27       	eor	r20, r20
 1c8:	40 f9       	bld	r20, 0
 1ca:	60 e2       	ldi	r22, 0x20	; 32
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN6,GET_BIT(Data,2));
 1d2:	c2 fb       	bst	r28, 2
 1d4:	44 27       	eor	r20, r20
 1d6:	40 f9       	bld	r20, 0
 1d8:	60 e4       	ldi	r22, 0x40	; 64
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN7,GET_BIT(Data,3));
 1e0:	c3 fb       	bst	r28, 3
 1e2:	44 27       	eor	r20, r20
 1e4:	40 f9       	bld	r20, 0
 1e6:	60 e8       	ldi	r22, 0x80	; 128
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*trigger enable pin*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,LOW);
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	68 e0       	ldi	r22, 0x08	; 8
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
 1f8:	87 ec       	ldi	r24, 0xC7	; 199
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <hlcd_sendData+0xb6>
 200:	00 c0       	rjmp	.+0      	; 0x202 <hlcd_sendData+0xbc>
 202:	00 00       	nop
	_delay_us(50);
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,HIGH);
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	68 e0       	ldi	r22, 0x08	; 8
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*return from this function*/
	return;
}
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <hlcd_init>:

/*This function is responsible for initializing the LCD module*/
void hlcd_init(void)
{
	/*LCD pins initialization*/
	mdio_pinStatus(HLCD_CONTROL_PORT,HLCD_CONTROL_RS | HLCD_CONTROL_RW |HLCD_CONTROL_EN,OUTPUT);
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	6e e0       	ldi	r22, 0x0E	; 14
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 f5 01 	call	0x3ea	; 0x3ea <mdio_pinStatus>
	mdio_pinStatus(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN4 | HLCD_DATA_PIN5 |HLCD_DATA_PIN6|HLCD_DATA_PIN7,OUTPUT);
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	60 ef       	ldi	r22, 0xF0	; 240
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 f5 01 	call	0x3ea	; 0x3ea <mdio_pinStatus>
	
	/*set enable pin to HIGH*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,HIGH);
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	68 e0       	ldi	r22, 0x08	; 8
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	80 e7       	ldi	r24, 0x70	; 112
 234:	92 e0       	ldi	r25, 0x02	; 2
 236:	21 50       	subi	r18, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <hlcd_init+0x24>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <hlcd_init+0x2e>
 240:	00 00       	nop
	
	/*delay 50ms for powering on*/
	_delay_ms(50);
	
	/*send command*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_RS,LOW);
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	62 e0       	ldi	r22, 0x02	; 2
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*Enable writing operation*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_RW,LOW);
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	64 e0       	ldi	r22, 0x04	; 4
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*sending command High byte*/
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN4,LOW);
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	60 e1       	ldi	r22, 0x10	; 16
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN5,HIGH);
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	60 e2       	ldi	r22, 0x20	; 32
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN6,LOW);
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	60 e4       	ldi	r22, 0x40	; 64
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN7,LOW);
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	60 e8       	ldi	r22, 0x80	; 128
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*trigger enable pin*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,LOW);
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	68 e0       	ldi	r22, 0x08	; 8
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 288:	87 ec       	ldi	r24, 0xC7	; 199
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <hlcd_init+0x7a>
 290:	00 c0       	rjmp	.+0      	; 0x292 <hlcd_init+0x80>
 292:	00 00       	nop
	_delay_us(50);
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,HIGH);
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	68 e0       	ldi	r22, 0x08	; 8
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	/*sending function set*/
	hlcd_sendCmd(0x2C);
 29e:	8c e2       	ldi	r24, 0x2C	; 44
 2a0:	0e 94 41 00 	call	0x82	; 0x82 <hlcd_sendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a4:	8f e9       	ldi	r24, 0x9F	; 159
 2a6:	9f e0       	ldi	r25, 0x0F	; 15
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <hlcd_init+0x96>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <hlcd_init+0x9c>
 2ae:	00 00       	nop
	
	/*delay for 1ms*/
	_delay_ms(1);
	
	/*sending display ON/OFF command*/
	hlcd_sendCmd(0x0F);
 2b0:	8f e0       	ldi	r24, 0x0F	; 15
 2b2:	0e 94 41 00 	call	0x82	; 0x82 <hlcd_sendCmd>
 2b6:	8f e9       	ldi	r24, 0x9F	; 159
 2b8:	9f e0       	ldi	r25, 0x0F	; 15
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <hlcd_init+0xa8>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <hlcd_init+0xae>
 2c0:	00 00       	nop
	
	/*delay for 1ms*/
	_delay_ms(1);
	
	/*sending clear display command*/
	hlcd_sendCmd(0x01);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 41 00 	call	0x82	; 0x82 <hlcd_sendCmd>
 2c8:	8f e3       	ldi	r24, 0x3F	; 63
 2ca:	9f e1       	ldi	r25, 0x1F	; 31
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <hlcd_init+0xba>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <hlcd_init+0xc0>
 2d2:	00 00       	nop
	
	/*delay for 2ms*/
	_delay_ms(2);
	
	/*send entry mode set command*/
	hlcd_sendCmd(0x06);
 2d4:	86 e0       	ldi	r24, 0x06	; 6
 2d6:	0e 94 41 00 	call	0x82	; 0x82 <hlcd_sendCmd>
 2da:	8f e9       	ldi	r24, 0x9F	; 159
 2dc:	9f e0       	ldi	r25, 0x0F	; 15
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <hlcd_init+0xcc>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <hlcd_init+0xd2>
 2e4:	00 00       	nop
 2e6:	08 95       	ret

000002e8 <hlcd_displayChar>:

/*This function is used to display char on the LCD*/
void hlcd_displayChar(u8_t char_data)
{
	/*sending character data to the LCD*/
	hlcd_sendData(char_data);
 2e8:	0e 94 a3 00 	call	0x146	; 0x146 <hlcd_sendData>
 2ec:	08 95       	ret

000002ee <hlcd_displayString>:
}


/*This function is used to display string on the LCD*/
void hlcd_displayString(u8_t* str_data)/*book -> {'B','o','o','k','\0'}*/
{
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	ec 01       	movw	r28, r24
	/*Looping over given string characters*/
	while(*str_data != '\0')  
 2f4:	88 81       	ld	r24, Y
 2f6:	88 23       	and	r24, r24
 2f8:	31 f0       	breq	.+12     	; 0x306 <hlcd_displayString+0x18>
 2fa:	21 96       	adiw	r28, 0x01	; 1
	{
		/*sending data character to the LCD*/
		hlcd_sendData(*str_data);
 2fc:	0e 94 a3 00 	call	0x146	; 0x146 <hlcd_sendData>

/*This function is used to display string on the LCD*/
void hlcd_displayString(u8_t* str_data)/*book -> {'B','o','o','k','\0'}*/
{
	/*Looping over given string characters*/
	while(*str_data != '\0')  
 300:	89 91       	ld	r24, Y+
 302:	81 11       	cpse	r24, r1
 304:	fb cf       	rjmp	.-10     	; 0x2fc <hlcd_displayString+0xe>
		str_data++;  
	}
	
	/*return from this function*/
	return;
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <hlcd_goToRowCol>:

/*This function is used to set the cursor on specific row on specific column*/
void hlcd_goToRowCol(u8_t rowNumber, u8_t colNumber)
{
	/*switching over LCD ROWs*/
	switch(rowNumber)
 30c:	88 23       	and	r24, r24
 30e:	19 f0       	breq	.+6      	; 0x316 <hlcd_goToRowCol+0xa>
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	31 f0       	breq	.+12     	; 0x320 <hlcd_goToRowCol+0x14>
 314:	08 95       	ret
	{
		/*in case of Row 0*/
		case HLCD_Row0:
			/*Add 1 to bit 7 (0x80) and use 0X00 on DDRAM to set row 0 then add the colNumber*/
			hlcd_sendCmd(0x80 | (0x00+ colNumber));
 316:	86 2f       	mov	r24, r22
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	0e 94 41 00 	call	0x82	; 0x82 <hlcd_sendCmd>
			break;
 31e:	08 95       	ret
		
		/*in case of Row 1*/	
		case HLCD_Row1:
			/*Add 1 to bit 7 (0x80) and use 0X40 on DDRAM to set row 1 then add the colNumber*/
			hlcd_sendCmd(0x80 | (0x40+ colNumber));
 320:	80 e4       	ldi	r24, 0x40	; 64
 322:	86 0f       	add	r24, r22
 324:	80 68       	ori	r24, 0x80	; 128
 326:	0e 94 41 00 	call	0x82	; 0x82 <hlcd_sendCmd>
 32a:	08 95       	ret

0000032c <main>:
#include "HLCD_Interface.h"

int main(void)
{
	
	mdio_setPinValue(PORTB, PIN4,INPUT_FLOAT);
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	60 e1       	ldi	r22, 0x10	; 16
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(PORTB, PIN5,INPUT_FLOAT);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	60 e2       	ldi	r22, 0x20	; 32
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(PORTB, PIN6,OUTPUT);
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	60 e4       	ldi	r22, 0x40	; 64
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	mdio_setPinValue(PORTB, PIN7,INPUT_FLOAT);
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	60 e8       	ldi	r22, 0x80	; 128
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	
	mspi_init(MSPI_SAMPLE_R_SETUP_F, MSPI_PRE_64);
 354:	65 e0       	ldi	r22, 0x05	; 5
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 9a 02 	call	0x534	; 0x534 <mspi_init>
	hlcd_init();
 35c:	0e 94 09 01 	call	0x212	; 0x212 <hlcd_init>
	hlcd_goToRowCol(HLCD_Row0,HLCD_col0);
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 86 01 	call	0x30c	; 0x30c <hlcd_goToRowCol>
	
	hlcd_displayString("hello");
 368:	80 e6       	ldi	r24, 0x60	; 96
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 77 01 	call	0x2ee	; 0x2ee <hlcd_displayString>
	
	/*the status of the led*/
	mdio_pinStatus(PORTD,PIN3,OUTPUT);
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	68 e0       	ldi	r22, 0x08	; 8
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	0e 94 f5 01 	call	0x3ea	; 0x3ea <mdio_pinStatus>
	mdio_pinStatus(PORTC,PIN2,OUTPUT);
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	64 e0       	ldi	r22, 0x04	; 4
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	0e 94 f5 01 	call	0x3ea	; 0x3ea <mdio_pinStatus>
	
	
	mdio_setPinValue(PORTD,PIN3,LOW);
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	68 e0       	ldi	r22, 0x08	; 8
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
	//hlcd_displayChar(data);
	
    /* Replace with your application code */
    while (1) 
    {
		hlcd_goToRowCol(HLCD_Row1,HLCD_col0);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 86 01 	call	0x30c	; 0x30c <hlcd_goToRowCol>
		data=mspi_recvChar();
 396:	0e 94 a8 02 	call	0x550	; 0x550 <mspi_recvChar>
 39a:	c8 2f       	mov	r28, r24
		hlcd_displayChar(data);
 39c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <hlcd_displayChar>
		
		
		
		
		if (data == 0x61)
 3a0:	c1 36       	cpi	r28, 0x61	; 97
 3a2:	59 f4       	brne	.+22     	; 0x3ba <main+0x8e>
		{
			mdio_setPinValue(PORTD,PIN3,HIGH);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	68 e0       	ldi	r22, 0x08	; 8
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
			mdio_setPinValue(PORTC,PIN2,LOW);
 3ae:	40 e0       	ldi	r20, 0x00	; 0
 3b0:	64 e0       	ldi	r22, 0x04	; 4
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
 3b8:	ea cf       	rjmp	.-44     	; 0x38e <main+0x62>
			
			//hlcd_goToRowCol(HLCD_Row1,HLCD_col0);
			//hlcd_displayChar(recive_var);
			
		}
		else if(data == 0x62)
 3ba:	c2 36       	cpi	r28, 0x62	; 98
 3bc:	59 f4       	brne	.+22     	; 0x3d4 <main+0xa8>
		{
			mdio_setPinValue(PORTD,PIN3,LOW);
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	68 e0       	ldi	r22, 0x08	; 8
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
			mdio_setPinValue(PORTC,PIN2,HIGH);
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	64 e0       	ldi	r22, 0x04	; 4
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
 3d2:	dd cf       	rjmp	.-70     	; 0x38e <main+0x62>
			//hlcd_goToRowCol(HLCD_Row1,HLCD_col0);
			//hlcd_displayChar(recive_var);
		}
		else
		{
				mdio_setPinValue(PORTD,PIN3,LOW);
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	68 e0       	ldi	r22, 0x08	; 8
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
				mdio_setPinValue(PORTC,PIN2,LOW);
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	64 e0       	ldi	r22, 0x04	; 4
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <mdio_setPinValue>
 3e8:	d2 cf       	rjmp	.-92     	; 0x38e <main+0x62>

000003ea <mdio_pinStatus>:
@to set a specified bit |=  to clear specified bit &= ~
*/
void mdio_pinStatus(u8_t port,u8_t pin,u8_t pin_status)
{
	/*Switching over DIO PORTs*/
	switch(port)
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	f9 f0       	breq	.+62     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3ee:	30 f0       	brcs	.+12     	; 0x3fc <mdio_pinStatus+0x12>
 3f0:	82 30       	cpi	r24, 0x02	; 2
 3f2:	a1 f1       	breq	.+104    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 3f4:	83 30       	cpi	r24, 0x03	; 3
 3f6:	09 f4       	brne	.+2      	; 0x3fa <mdio_pinStatus+0x10>
 3f8:	49 c0       	rjmp	.+146    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 3fa:	08 95       	ret
	{
		case PORTA:
			/*switching over DIO pin status*/
			switch(pin_status)
 3fc:	41 30       	cpi	r20, 0x01	; 1
 3fe:	41 f0       	breq	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 400:	18 f0       	brcs	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 402:	42 30       	cpi	r20, 0x02	; 2
 404:	51 f0       	breq	.+20     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 406:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRA |= pin;
 408:	8a b3       	in	r24, 0x1a	; 26
 40a:	68 2b       	or	r22, r24
 40c:	6a bb       	out	0x1a, r22	; 26
					break;
 40e:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRA &= ~pin;
 410:	8a b3       	in	r24, 0x1a	; 26
 412:	60 95       	com	r22
 414:	68 23       	and	r22, r24
 416:	6a bb       	out	0x1a, r22	; 26
					break;
 418:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRA &= ~pin;
 41a:	8a b3       	in	r24, 0x1a	; 26
 41c:	96 2f       	mov	r25, r22
 41e:	90 95       	com	r25
 420:	89 23       	and	r24, r25
 422:	8a bb       	out	0x1a, r24	; 26
					MDIO_PORTA |= pin;
 424:	8b b3       	in	r24, 0x1b	; 27
 426:	68 2b       	or	r22, r24
 428:	6b bb       	out	0x1b, r22	; 27
					break;
 42a:	08 95       	ret
			}
		    break;	
		
		case PORTB:
			switch(pin_status)
 42c:	41 30       	cpi	r20, 0x01	; 1
 42e:	41 f0       	breq	.+16     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 430:	18 f0       	brcs	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 432:	42 30       	cpi	r20, 0x02	; 2
 434:	51 f0       	breq	.+20     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 436:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRB |= pin;
 438:	87 b3       	in	r24, 0x17	; 23
 43a:	68 2b       	or	r22, r24
 43c:	67 bb       	out	0x17, r22	; 23
					break;
 43e:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRB &= ~pin;
 440:	87 b3       	in	r24, 0x17	; 23
 442:	60 95       	com	r22
 444:	68 23       	and	r22, r24
 446:	67 bb       	out	0x17, r22	; 23
					break;
 448:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRB &= ~pin;
 44a:	87 b3       	in	r24, 0x17	; 23
 44c:	96 2f       	mov	r25, r22
 44e:	90 95       	com	r25
 450:	89 23       	and	r24, r25
 452:	87 bb       	out	0x17, r24	; 23
					MDIO_PORTB |= pin;
 454:	88 b3       	in	r24, 0x18	; 24
 456:	68 2b       	or	r22, r24
 458:	68 bb       	out	0x18, r22	; 24
					break;
 45a:	08 95       	ret
			}
		    break;	
			
		case PORTC:
			switch(pin_status)
 45c:	41 30       	cpi	r20, 0x01	; 1
 45e:	41 f0       	breq	.+16     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 460:	18 f0       	brcs	.+6      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 462:	42 30       	cpi	r20, 0x02	; 2
 464:	51 f0       	breq	.+20     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 466:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRC |= pin;
 468:	84 b3       	in	r24, 0x14	; 20
 46a:	68 2b       	or	r22, r24
 46c:	64 bb       	out	0x14, r22	; 20
					break;
 46e:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRA &= ~pin;
 470:	8a b3       	in	r24, 0x1a	; 26
 472:	60 95       	com	r22
 474:	68 23       	and	r22, r24
 476:	6a bb       	out	0x1a, r22	; 26
					break;
 478:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRC &= ~pin;
 47a:	84 b3       	in	r24, 0x14	; 20
 47c:	96 2f       	mov	r25, r22
 47e:	90 95       	com	r25
 480:	89 23       	and	r24, r25
 482:	84 bb       	out	0x14, r24	; 20
					MDIO_PORTC |= pin;
 484:	85 b3       	in	r24, 0x15	; 21
 486:	68 2b       	or	r22, r24
 488:	65 bb       	out	0x15, r22	; 21
					break;
 48a:	08 95       	ret
			}
		    break;
		
		case PORTD:
			switch(pin_status)
 48c:	41 30       	cpi	r20, 0x01	; 1
 48e:	41 f0       	breq	.+16     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 490:	18 f0       	brcs	.+6      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 492:	42 30       	cpi	r20, 0x02	; 2
 494:	51 f0       	breq	.+20     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 496:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRD |= pin;
 498:	82 b3       	in	r24, 0x12	; 18
 49a:	68 2b       	or	r22, r24
 49c:	62 bb       	out	0x12, r22	; 18
					break;
 49e:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRD &= ~pin;
 4a0:	82 b3       	in	r24, 0x12	; 18
 4a2:	60 95       	com	r22
 4a4:	68 23       	and	r22, r24
 4a6:	62 bb       	out	0x12, r22	; 18
					break;
 4a8:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRD &= ~pin;
 4aa:	82 b3       	in	r24, 0x12	; 18
 4ac:	96 2f       	mov	r25, r22
 4ae:	90 95       	com	r25
 4b0:	89 23       	and	r24, r25
 4b2:	82 bb       	out	0x12, r24	; 18
					MDIO_PORTD |= pin;
 4b4:	82 b3       	in	r24, 0x12	; 18
 4b6:	68 2b       	or	r22, r24
 4b8:	62 bb       	out	0x12, r22	; 18
 4ba:	08 95       	ret

000004bc <mdio_setPinValue>:

/*this function is responsible for setting pin or pins for a dedicated value */
void mdio_setPinValue(u8_t port,u8_t pin,u8_t pin_value)//output
{
	/*Switching over DIO PORTs*/
	switch(port)
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	99 f0       	breq	.+38     	; 0x4e6 <mdio_setPinValue+0x2a>
 4c0:	28 f0       	brcs	.+10     	; 0x4cc <mdio_setPinValue+0x10>
 4c2:	82 30       	cpi	r24, 0x02	; 2
 4c4:	e9 f0       	breq	.+58     	; 0x500 <mdio_setPinValue+0x44>
 4c6:	83 30       	cpi	r24, 0x03	; 3
 4c8:	41 f1       	breq	.+80     	; 0x51a <mdio_setPinValue+0x5e>
 4ca:	08 95       	ret
	{
		case PORTA:
		/*switching over DIO pin status*/
			switch(pin_value)
 4cc:	44 23       	and	r20, r20
 4ce:	31 f0       	breq	.+12     	; 0x4dc <mdio_setPinValue+0x20>
 4d0:	41 30       	cpi	r20, 0x01	; 1
 4d2:	79 f5       	brne	.+94     	; 0x532 <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTA |= pin;
 4d4:	8b b3       	in	r24, 0x1b	; 27
 4d6:	68 2b       	or	r22, r24
 4d8:	6b bb       	out	0x1b, r22	; 27
					break;
 4da:	08 95       	ret
			
				case LOW:
					MDIO_PORTA &= ~pin;
 4dc:	8b b3       	in	r24, 0x1b	; 27
 4de:	60 95       	com	r22
 4e0:	68 23       	and	r22, r24
 4e2:	6b bb       	out	0x1b, r22	; 27
					break;
 4e4:	08 95       	ret
			}
			break;
		
		case PORTB:
		/*switching over DIO pin status*/
			switch(pin_value)
 4e6:	44 23       	and	r20, r20
 4e8:	31 f0       	breq	.+12     	; 0x4f6 <mdio_setPinValue+0x3a>
 4ea:	41 30       	cpi	r20, 0x01	; 1
 4ec:	11 f5       	brne	.+68     	; 0x532 <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTB |= pin;
 4ee:	88 b3       	in	r24, 0x18	; 24
 4f0:	68 2b       	or	r22, r24
 4f2:	68 bb       	out	0x18, r22	; 24
					break;
 4f4:	08 95       	ret
			
				case LOW:
					MDIO_PORTB &= ~pin;
 4f6:	88 b3       	in	r24, 0x18	; 24
 4f8:	60 95       	com	r22
 4fa:	68 23       	and	r22, r24
 4fc:	68 bb       	out	0x18, r22	; 24
					break;
 4fe:	08 95       	ret
			}
			break;
		
		case PORTC:
		/*switching over DIO pin status*/
			switch(pin_value)
 500:	44 23       	and	r20, r20
 502:	31 f0       	breq	.+12     	; 0x510 <mdio_setPinValue+0x54>
 504:	41 30       	cpi	r20, 0x01	; 1
 506:	a9 f4       	brne	.+42     	; 0x532 <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTC |= pin;
 508:	85 b3       	in	r24, 0x15	; 21
 50a:	68 2b       	or	r22, r24
 50c:	65 bb       	out	0x15, r22	; 21
					break;
 50e:	08 95       	ret
			
				case LOW:
					MDIO_PORTC &= ~pin;
 510:	85 b3       	in	r24, 0x15	; 21
 512:	60 95       	com	r22
 514:	68 23       	and	r22, r24
 516:	65 bb       	out	0x15, r22	; 21
					break;
 518:	08 95       	ret
			}
			break;
		
		case PORTD:
		/*switching over DIO pin status*/
			switch(pin_value)
 51a:	44 23       	and	r20, r20
 51c:	31 f0       	breq	.+12     	; 0x52a <mdio_setPinValue+0x6e>
 51e:	41 30       	cpi	r20, 0x01	; 1
 520:	41 f4       	brne	.+16     	; 0x532 <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTD |= pin;
 522:	82 b3       	in	r24, 0x12	; 18
 524:	68 2b       	or	r22, r24
 526:	62 bb       	out	0x12, r22	; 18
					break;
 528:	08 95       	ret
			
				case LOW:
					MDIO_PORTD &= ~pin;
 52a:	82 b3       	in	r24, 0x12	; 18
 52c:	60 95       	com	r22
 52e:	68 23       	and	r22, r24
 530:	62 bb       	out	0x12, r22	; 18
 532:	08 95       	ret

00000534 <mspi_init>:

/*this function is responsible for initializing spi module*/
void mspi_init(u8_t data_mode, u8_t clk_prescaler)
{
	/*Enable SPI*/
	SET_BIT(MSPI_SPCR,6);
 534:	6e 9a       	sbi	0x0d, 6	; 13
	
	MSPI_SPCR = (0x40) | (data_mode << 2);
 536:	24 e0       	ldi	r18, 0x04	; 4
 538:	82 9f       	mul	r24, r18
 53a:	c0 01       	movw	r24, r0
 53c:	11 24       	eor	r1, r1
 53e:	80 64       	ori	r24, 0x40	; 64
 540:	8d b9       	out	0x0d, r24	; 13
	
	/*Check if the prescaler value is divisable by two or not*/
	if( (clk_prescaler % 2) == 0)
 542:	60 ff       	sbrs	r22, 0
	{
		/*Enable SPI double speed*/
		SET_BIT(MSPI_SPSR, 0);
 544:	70 9a       	sbi	0x0e, 0	; 14
	{
		/*Do nothing*/
	}
	
	/*Set SPI clock*/
	MSPI_SPCR |= (clk_prescaler / 2);
 546:	8d b1       	in	r24, 0x0d	; 13
 548:	66 95       	lsr	r22
 54a:	68 2b       	or	r22, r24
 54c:	6d b9       	out	0x0d, r22	; 13
 54e:	08 95       	ret

00000550 <mspi_recvChar>:
	
	/*Variable used in timing out operations*/
	u16_t timeout_var = 0;
	
	/*Enable SPI peripheral*/
	SET_BIT(MSPI_SPCR, 6);
 550:	6e 9a       	sbi	0x0d, 6	; 13
	
	/*Send master data*/
	//MSPI_SPDR = data;
	
	/*Wait until data is transmitted or timeout in 10ms*/
	while (GET_BIT(MSPI_SPSR, 7) == 0);//&& timeout_var < 10000)
 552:	77 9b       	sbis	0x0e, 7	; 14
 554:	fe cf       	rjmp	.-4      	; 0x552 <mspi_recvChar+0x2>
		/*Delay for 1us*/
		//_delay_us(1);
	
	
	/*Disable SPI peripheral*/
	CLEAR_BIT(MSPI_SPCR, 6);
 556:	6e 98       	cbi	0x0d, 6	; 13
	
	/*Return SPI slave data*/
	return MSPI_SPDR;
 558:	8f b1       	in	r24, 0x0f	; 15
 55a:	08 95       	ret

0000055c <_exit>:
 55c:	f8 94       	cli

0000055e <__stop_program>:
 55e:	ff cf       	rjmp	.-2      	; 0x55e <__stop_program>
