
final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000590  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000590  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016c9  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000993  00000000  00000000  00001e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b07  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d8  00000000  00000000  000032e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053e  00000000  00000000  000034bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ddc  00000000  00000000  000039fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000047d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
  8a:	0c 94 c6 02 	jmp	0x58c	; 0x58c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <hlcd_sendCmd>:
}


/*This function is responsible for sending 8-bits command for the LCD module*/
static void hlcd_sendCmd(u8_t command) /*0b 1110   -> EN   0100*/
{
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	/*send command*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_RS,LOW);
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	62 e0       	ldi	r22, 0x02	; 2
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*Enable writing operation*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_RW,LOW);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*sending command High byte*/
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN4,GET_BIT(command,4));
  aa:	c4 fb       	bst	r28, 4
  ac:	44 27       	eor	r20, r20
  ae:	40 f9       	bld	r20, 0
  b0:	60 e1       	ldi	r22, 0x10	; 16
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN5,GET_BIT(command,5));
  b8:	c5 fb       	bst	r28, 5
  ba:	44 27       	eor	r20, r20
  bc:	40 f9       	bld	r20, 0
  be:	60 e2       	ldi	r22, 0x20	; 32
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN6,GET_BIT(command,6));
  c6:	c6 fb       	bst	r28, 6
  c8:	44 27       	eor	r20, r20
  ca:	40 f9       	bld	r20, 0
  cc:	60 e4       	ldi	r22, 0x40	; 64
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN7,GET_BIT(command,7));
  d4:	4c 2f       	mov	r20, r28
  d6:	44 1f       	adc	r20, r20
  d8:	44 27       	eor	r20, r20
  da:	44 1f       	adc	r20, r20
  dc:	60 e8       	ldi	r22, 0x80	; 128
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*trigger enable pin*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,LOW);
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	68 e0       	ldi	r22, 0x08	; 8
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8a e6       	ldi	r24, 0x6A	; 106
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <hlcd_sendCmd+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <hlcd_sendCmd+0x64>
	_delay_us(20);
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,HIGH);
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	68 e0       	ldi	r22, 0x08	; 8
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*sending command low byte*/
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN4,GET_BIT(command,0));
 100:	4c 2f       	mov	r20, r28
 102:	41 70       	andi	r20, 0x01	; 1
 104:	60 e1       	ldi	r22, 0x10	; 16
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN5,GET_BIT(command,1));
 10c:	c1 fb       	bst	r28, 1
 10e:	44 27       	eor	r20, r20
 110:	40 f9       	bld	r20, 0
 112:	60 e2       	ldi	r22, 0x20	; 32
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN6,GET_BIT(command,2));
 11a:	c2 fb       	bst	r28, 2
 11c:	44 27       	eor	r20, r20
 11e:	40 f9       	bld	r20, 0
 120:	60 e4       	ldi	r22, 0x40	; 64
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN7,GET_BIT(command,3));
 128:	c3 fb       	bst	r28, 3
 12a:	44 27       	eor	r20, r20
 12c:	40 f9       	bld	r20, 0
 12e:	60 e8       	ldi	r22, 0x80	; 128
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*trigger enable pin*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,LOW);
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	68 e0       	ldi	r22, 0x08	; 8
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
 140:	8a e6       	ldi	r24, 0x6A	; 106
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <hlcd_sendCmd+0xb0>
 146:	00 c0       	rjmp	.+0      	; 0x148 <hlcd_sendCmd+0xb6>
	_delay_us(20);
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,HIGH);
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	68 e0       	ldi	r22, 0x08	; 8
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	
	
	/*return from this function*/
	return;
}
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <hlcd_sendData>:
/*This function is responsible for sending 8-bits command for the LCD module*/
static void hlcd_sendCmd(u8_t command);

/*This function is responsible for sending 8-bits data for the LCD module*/
static void hlcd_sendData(u8_t Data)
{
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
	/*sending display data*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_RS,HIGH);
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*Enable writing operation*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_RW,LOW);
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	64 e0       	ldi	r22, 0x04	; 4
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*sending data High byte*/
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN4,GET_BIT(Data,4));
 16e:	c4 fb       	bst	r28, 4
 170:	44 27       	eor	r20, r20
 172:	40 f9       	bld	r20, 0
 174:	60 e1       	ldi	r22, 0x10	; 16
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN5,GET_BIT(Data,5));
 17c:	c5 fb       	bst	r28, 5
 17e:	44 27       	eor	r20, r20
 180:	40 f9       	bld	r20, 0
 182:	60 e2       	ldi	r22, 0x20	; 32
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN6,GET_BIT(Data,6));
 18a:	c6 fb       	bst	r28, 6
 18c:	44 27       	eor	r20, r20
 18e:	40 f9       	bld	r20, 0
 190:	60 e4       	ldi	r22, 0x40	; 64
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN7,GET_BIT(Data,7));
 198:	4c 2f       	mov	r20, r28
 19a:	44 1f       	adc	r20, r20
 19c:	44 27       	eor	r20, r20
 19e:	44 1f       	adc	r20, r20
 1a0:	60 e8       	ldi	r22, 0x80	; 128
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*trigger enable pin*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,LOW);
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	68 e0       	ldi	r22, 0x08	; 8
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
 1b2:	87 ec       	ldi	r24, 0xC7	; 199
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <hlcd_sendData+0x60>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <hlcd_sendData+0x66>
 1bc:	00 00       	nop
	_delay_us(50);
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,HIGH);
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	68 e0       	ldi	r22, 0x08	; 8
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*sending data low byte*/
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN4,GET_BIT(Data,0));
 1c8:	4c 2f       	mov	r20, r28
 1ca:	41 70       	andi	r20, 0x01	; 1
 1cc:	60 e1       	ldi	r22, 0x10	; 16
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN5,GET_BIT(Data,1));
 1d4:	c1 fb       	bst	r28, 1
 1d6:	44 27       	eor	r20, r20
 1d8:	40 f9       	bld	r20, 0
 1da:	60 e2       	ldi	r22, 0x20	; 32
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN6,GET_BIT(Data,2));
 1e2:	c2 fb       	bst	r28, 2
 1e4:	44 27       	eor	r20, r20
 1e6:	40 f9       	bld	r20, 0
 1e8:	60 e4       	ldi	r22, 0x40	; 64
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN7,GET_BIT(Data,3));
 1f0:	c3 fb       	bst	r28, 3
 1f2:	44 27       	eor	r20, r20
 1f4:	40 f9       	bld	r20, 0
 1f6:	60 e8       	ldi	r22, 0x80	; 128
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*trigger enable pin*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,LOW);
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	68 e0       	ldi	r22, 0x08	; 8
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
 208:	87 ec       	ldi	r24, 0xC7	; 199
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <hlcd_sendData+0xb6>
 210:	00 c0       	rjmp	.+0      	; 0x212 <hlcd_sendData+0xbc>
 212:	00 00       	nop
	_delay_us(50);
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,HIGH);
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	68 e0       	ldi	r22, 0x08	; 8
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*return from this function*/
	return;
}
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <hlcd_init>:

/*This function is responsible for initializing the LCD module*/
void hlcd_init(void)
{
	/*LCD pins initialization*/
	mdio_pinStatus(HLCD_CONTROL_PORT,HLCD_CONTROL_RS | HLCD_CONTROL_RW |HLCD_CONTROL_EN,OUTPUT);
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	6e e0       	ldi	r22, 0x0E	; 14
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 f6 01 	call	0x3ec	; 0x3ec <mdio_pinStatus>
	mdio_pinStatus(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN4 | HLCD_DATA_PIN5 |HLCD_DATA_PIN6|HLCD_DATA_PIN7,OUTPUT);
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	60 ef       	ldi	r22, 0xF0	; 240
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 f6 01 	call	0x3ec	; 0x3ec <mdio_pinStatus>
	
	/*set enable pin to HIGH*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,HIGH);
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	68 e0       	ldi	r22, 0x08	; 8
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	80 e7       	ldi	r24, 0x70	; 112
 244:	92 e0       	ldi	r25, 0x02	; 2
 246:	21 50       	subi	r18, 0x01	; 1
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <hlcd_init+0x24>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <hlcd_init+0x2e>
 250:	00 00       	nop
	
	/*delay 50ms for powering on*/
	_delay_ms(50);
	
	/*send command*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_RS,LOW);
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	62 e0       	ldi	r22, 0x02	; 2
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*Enable writing operation*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_RW,LOW);
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	64 e0       	ldi	r22, 0x04	; 4
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*sending command High byte*/
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN4,LOW);
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	60 e1       	ldi	r22, 0x10	; 16
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN5,HIGH);
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	60 e2       	ldi	r22, 0x20	; 32
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN6,LOW);
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	60 e4       	ldi	r22, 0x40	; 64
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PINS_PORT,HLCD_DATA_PIN7,LOW);
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	60 e8       	ldi	r22, 0x80	; 128
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*trigger enable pin*/
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,LOW);
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	68 e0       	ldi	r22, 0x08	; 8
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	87 ec       	ldi	r24, 0xC7	; 199
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <hlcd_init+0x7a>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <hlcd_init+0x80>
 2a2:	00 00       	nop
	_delay_us(50);
	mdio_setPinValue(HLCD_CONTROL_PORT,HLCD_CONTROL_EN,HIGH);
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	68 e0       	ldi	r22, 0x08	; 8
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
	
	/*sending function set*/
	hlcd_sendCmd(0x2C);
 2ae:	8c e2       	ldi	r24, 0x2C	; 44
 2b0:	0e 94 49 00 	call	0x92	; 0x92 <hlcd_sendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b4:	8f e9       	ldi	r24, 0x9F	; 159
 2b6:	9f e0       	ldi	r25, 0x0F	; 15
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <hlcd_init+0x96>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <hlcd_init+0x9c>
 2be:	00 00       	nop
	
	/*delay for 1ms*/
	_delay_ms(1);
	
	/*sending display ON/OFF command*/
	hlcd_sendCmd(0x0F);
 2c0:	8f e0       	ldi	r24, 0x0F	; 15
 2c2:	0e 94 49 00 	call	0x92	; 0x92 <hlcd_sendCmd>
 2c6:	8f e9       	ldi	r24, 0x9F	; 159
 2c8:	9f e0       	ldi	r25, 0x0F	; 15
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <hlcd_init+0xa8>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <hlcd_init+0xae>
 2d0:	00 00       	nop
	
	/*delay for 1ms*/
	_delay_ms(1);
	
	/*sending clear display command*/
	hlcd_sendCmd(0x01);
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 49 00 	call	0x92	; 0x92 <hlcd_sendCmd>
 2d8:	8f e3       	ldi	r24, 0x3F	; 63
 2da:	9f e1       	ldi	r25, 0x1F	; 31
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <hlcd_init+0xba>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <hlcd_init+0xc0>
 2e2:	00 00       	nop
	
	/*delay for 2ms*/
	_delay_ms(2);
	
	/*send entry mode set command*/
	hlcd_sendCmd(0x06);
 2e4:	86 e0       	ldi	r24, 0x06	; 6
 2e6:	0e 94 49 00 	call	0x92	; 0x92 <hlcd_sendCmd>
 2ea:	8f e9       	ldi	r24, 0x9F	; 159
 2ec:	9f e0       	ldi	r25, 0x0F	; 15
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <hlcd_init+0xcc>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <hlcd_init+0xd2>
 2f4:	00 00       	nop
 2f6:	08 95       	ret

000002f8 <hlcd_displayChar>:

/*This function is used to display char on the LCD*/
void hlcd_displayChar(u8_t char_data)
{
	/*sending character data to the LCD*/
	hlcd_sendData(char_data);
 2f8:	0e 94 ab 00 	call	0x156	; 0x156 <hlcd_sendData>
 2fc:	08 95       	ret

000002fe <hlcd_displayString>:
}


/*This function is used to display string on the LCD*/
void hlcd_displayString(u8_t* str_data)/*book -> {'B','o','o','k','\0'}*/
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
	/*Looping over given string characters*/
	while(*str_data != '\0')  
 304:	88 81       	ld	r24, Y
 306:	88 23       	and	r24, r24
 308:	31 f0       	breq	.+12     	; 0x316 <hlcd_displayString+0x18>
 30a:	21 96       	adiw	r28, 0x01	; 1
	{
		/*sending data character to the LCD*/
		hlcd_sendData(*str_data);
 30c:	0e 94 ab 00 	call	0x156	; 0x156 <hlcd_sendData>

/*This function is used to display string on the LCD*/
void hlcd_displayString(u8_t* str_data)/*book -> {'B','o','o','k','\0'}*/
{
	/*Looping over given string characters*/
	while(*str_data != '\0')  
 310:	89 91       	ld	r24, Y+
 312:	81 11       	cpse	r24, r1
 314:	fb cf       	rjmp	.-10     	; 0x30c <hlcd_displayString+0xe>
		str_data++;  
	}
	
	/*return from this function*/
	return;
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <hlcd_goToRowCol>:

/*This function is used to set the cursor on specific row on specific column*/
void hlcd_goToRowCol(u8_t rowNumber, u8_t colNumber)
{
	/*switching over LCD ROWs*/
	switch(rowNumber)
 31c:	88 23       	and	r24, r24
 31e:	19 f0       	breq	.+6      	; 0x326 <hlcd_goToRowCol+0xa>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	31 f0       	breq	.+12     	; 0x330 <hlcd_goToRowCol+0x14>
 324:	08 95       	ret
	{
		/*in case of Row 0*/
		case HLCD_Row0:
			/*Add 1 to bit 7 (0x80) and use 0X00 on DDRAM to set row 0 then add the colNumber*/
			hlcd_sendCmd(0x80 | (0x00+ colNumber));
 326:	86 2f       	mov	r24, r22
 328:	80 68       	ori	r24, 0x80	; 128
 32a:	0e 94 49 00 	call	0x92	; 0x92 <hlcd_sendCmd>
			break;
 32e:	08 95       	ret
		
		/*in case of Row 1*/	
		case HLCD_Row1:
			/*Add 1 to bit 7 (0x80) and use 0X40 on DDRAM to set row 1 then add the colNumber*/
			hlcd_sendCmd(0x80 | (0x40+ colNumber));
 330:	80 e4       	ldi	r24, 0x40	; 64
 332:	86 0f       	add	r24, r22
 334:	80 68       	ori	r24, 0x80	; 128
 336:	0e 94 49 00 	call	0x92	; 0x92 <hlcd_sendCmd>
 33a:	08 95       	ret

0000033c <main>:
#define F_CPU 16000000UL
#include "util/delay.h"


int main(void)
{
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	1f 92       	push	r1
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
	/*variables*/
	u8_t recive_var=0;
 346:	19 82       	std	Y+1, r1	; 0x01
	
	/*the status of the UART PINs*/
	mdio_pinStatus(PORTD,PIN1,OUTPUT);
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	83 e0       	ldi	r24, 0x03	; 3
 34e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <mdio_pinStatus>
	mdio_pinStatus(PORTD,PIN0,INPUT_FLOAT);
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	0e 94 f6 01 	call	0x3ec	; 0x3ec <mdio_pinStatus>
	
	/*the status of the SPI module*/
	mdio_pinStatus(PORTB,PIN4,OUTPUT);
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	60 e1       	ldi	r22, 0x10	; 16
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 f6 01 	call	0x3ec	; 0x3ec <mdio_pinStatus>
	mdio_pinStatus(PORTB,PIN5,OUTPUT);
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	60 e2       	ldi	r22, 0x20	; 32
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <mdio_pinStatus>
	mdio_pinStatus(PORTB,PIN6,INPUT_FLOAT);
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	60 e4       	ldi	r22, 0x40	; 64
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 f6 01 	call	0x3ec	; 0x3ec <mdio_pinStatus>
	mdio_pinStatus(PORTB,PIN7,OUTPUT);
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	60 e8       	ldi	r22, 0x80	; 128
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 f6 01 	call	0x3ec	; 0x3ec <mdio_pinStatus>
	
	/*the status of the led*/
	mdio_pinStatus(PORTD,PIN2,OUTPUT);
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	64 e0       	ldi	r22, 0x04	; 4
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <mdio_pinStatus>
	
	/*Initializing the modules*/
	muart_init(MUART_9600BPS);
 38e:	87 e6       	ldi	r24, 0x67	; 103
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 b9 02 	call	0x572	; 0x572 <muart_init>
	hlcd_init();
 396:	0e 94 11 01 	call	0x222	; 0x222 <hlcd_init>
	mspi_init(MSPI_SAMPLE_R_SETUP_F,MSPI_PRE_32);
 39a:	64 e0       	ldi	r22, 0x04	; 4
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 9b 02 	call	0x536	; 0x536 <mspi_init>
	
	/*for the LCD the first line*/
	hlcd_goToRowCol(HLCD_Row0,HLCD_col0);
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 8e 01 	call	0x31c	; 0x31c <hlcd_goToRowCol>
	hlcd_displayString("hello");
 3aa:	80 e6       	ldi	r24, 0x60	; 96
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 7f 01 	call	0x2fe	; 0x2fe <hlcd_displayString>
	
	
    /* Replace with your application code */
    while (1) 
    {
		muart_reciveByte(&recive_var);
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	0e 94 c0 02 	call	0x580	; 0x580 <muart_reciveByte>
		hlcd_goToRowCol(HLCD_Row1,HLCD_col0);
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 8e 01 	call	0x31c	; 0x31c <hlcd_goToRowCol>
		hlcd_displayChar(recive_var);
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <hlcd_displayChar>
		mspi_sendRecvByte(recive_var);
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	0e 94 a8 02 	call	0x550	; 0x550 <mspi_sendRecvByte>
		
		
		if (recive_var == 'a')
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	81 36       	cpi	r24, 0x61	; 97
 3d2:	31 f4       	brne	.+12     	; 0x3e0 <main+0xa4>
		{
			mdio_setPinValue(PORTD,PIN2,HIGH);
 3d4:	41 e0       	ldi	r20, 0x01	; 1
 3d6:	64 e0       	ldi	r22, 0x04	; 4
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
 3de:	e9 cf       	rjmp	.-46     	; 0x3b2 <main+0x76>
			//hlcd_displayChar(recive_var);
			
		}
		else
		{
			mdio_setPinValue(PORTD,PIN2,LOW);
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	64 e0       	ldi	r22, 0x04	; 4
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	0e 94 5f 02 	call	0x4be	; 0x4be <mdio_setPinValue>
 3ea:	e3 cf       	rjmp	.-58     	; 0x3b2 <main+0x76>

000003ec <mdio_pinStatus>:
@to set a specified bit |=  to clear specified bit &= ~
*/
void mdio_pinStatus(u8_t port,u8_t pin,u8_t pin_status)
{
	/*Switching over DIO PORTs*/
	switch(port)
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	f9 f0       	breq	.+62     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3f0:	30 f0       	brcs	.+12     	; 0x3fe <mdio_pinStatus+0x12>
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	a1 f1       	breq	.+104    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3f6:	83 30       	cpi	r24, 0x03	; 3
 3f8:	09 f4       	brne	.+2      	; 0x3fc <mdio_pinStatus+0x10>
 3fa:	49 c0       	rjmp	.+146    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 3fc:	08 95       	ret
	{
		case PORTA:
			/*switching over DIO pin status*/
			switch(pin_status)
 3fe:	41 30       	cpi	r20, 0x01	; 1
 400:	41 f0       	breq	.+16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 402:	18 f0       	brcs	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 404:	42 30       	cpi	r20, 0x02	; 2
 406:	51 f0       	breq	.+20     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 408:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRA |= pin;
 40a:	8a b3       	in	r24, 0x1a	; 26
 40c:	68 2b       	or	r22, r24
 40e:	6a bb       	out	0x1a, r22	; 26
					break;
 410:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRA &= ~pin;
 412:	8a b3       	in	r24, 0x1a	; 26
 414:	60 95       	com	r22
 416:	68 23       	and	r22, r24
 418:	6a bb       	out	0x1a, r22	; 26
					break;
 41a:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRA &= ~pin;
 41c:	8a b3       	in	r24, 0x1a	; 26
 41e:	96 2f       	mov	r25, r22
 420:	90 95       	com	r25
 422:	89 23       	and	r24, r25
 424:	8a bb       	out	0x1a, r24	; 26
					MDIO_PORTA |= pin;
 426:	8b b3       	in	r24, 0x1b	; 27
 428:	68 2b       	or	r22, r24
 42a:	6b bb       	out	0x1b, r22	; 27
					break;
 42c:	08 95       	ret
			}
		    break;	
		
		case PORTB:
			switch(pin_status)
 42e:	41 30       	cpi	r20, 0x01	; 1
 430:	41 f0       	breq	.+16     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 432:	18 f0       	brcs	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 434:	42 30       	cpi	r20, 0x02	; 2
 436:	51 f0       	breq	.+20     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 438:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRB |= pin;
 43a:	87 b3       	in	r24, 0x17	; 23
 43c:	68 2b       	or	r22, r24
 43e:	67 bb       	out	0x17, r22	; 23
					break;
 440:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRB &= ~pin;
 442:	87 b3       	in	r24, 0x17	; 23
 444:	60 95       	com	r22
 446:	68 23       	and	r22, r24
 448:	67 bb       	out	0x17, r22	; 23
					break;
 44a:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRB &= ~pin;
 44c:	87 b3       	in	r24, 0x17	; 23
 44e:	96 2f       	mov	r25, r22
 450:	90 95       	com	r25
 452:	89 23       	and	r24, r25
 454:	87 bb       	out	0x17, r24	; 23
					MDIO_PORTB |= pin;
 456:	88 b3       	in	r24, 0x18	; 24
 458:	68 2b       	or	r22, r24
 45a:	68 bb       	out	0x18, r22	; 24
					break;
 45c:	08 95       	ret
			}
		    break;	
			
		case PORTC:
			switch(pin_status)
 45e:	41 30       	cpi	r20, 0x01	; 1
 460:	41 f0       	breq	.+16     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 462:	18 f0       	brcs	.+6      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 464:	42 30       	cpi	r20, 0x02	; 2
 466:	51 f0       	breq	.+20     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 468:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRC |= pin;
 46a:	84 b3       	in	r24, 0x14	; 20
 46c:	68 2b       	or	r22, r24
 46e:	64 bb       	out	0x14, r22	; 20
					break;
 470:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRA &= ~pin;
 472:	8a b3       	in	r24, 0x1a	; 26
 474:	60 95       	com	r22
 476:	68 23       	and	r22, r24
 478:	6a bb       	out	0x1a, r22	; 26
					break;
 47a:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRC &= ~pin;
 47c:	84 b3       	in	r24, 0x14	; 20
 47e:	96 2f       	mov	r25, r22
 480:	90 95       	com	r25
 482:	89 23       	and	r24, r25
 484:	84 bb       	out	0x14, r24	; 20
					MDIO_PORTC |= pin;
 486:	85 b3       	in	r24, 0x15	; 21
 488:	68 2b       	or	r22, r24
 48a:	65 bb       	out	0x15, r22	; 21
					break;
 48c:	08 95       	ret
			}
		    break;
		
		case PORTD:
			switch(pin_status)
 48e:	41 30       	cpi	r20, 0x01	; 1
 490:	41 f0       	breq	.+16     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 492:	18 f0       	brcs	.+6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 494:	42 30       	cpi	r20, 0x02	; 2
 496:	51 f0       	breq	.+20     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 498:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRD |= pin;
 49a:	82 b3       	in	r24, 0x12	; 18
 49c:	68 2b       	or	r22, r24
 49e:	62 bb       	out	0x12, r22	; 18
					break;
 4a0:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRD &= ~pin;
 4a2:	82 b3       	in	r24, 0x12	; 18
 4a4:	60 95       	com	r22
 4a6:	68 23       	and	r22, r24
 4a8:	62 bb       	out	0x12, r22	; 18
					break;
 4aa:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRD &= ~pin;
 4ac:	82 b3       	in	r24, 0x12	; 18
 4ae:	96 2f       	mov	r25, r22
 4b0:	90 95       	com	r25
 4b2:	89 23       	and	r24, r25
 4b4:	82 bb       	out	0x12, r24	; 18
					MDIO_PORTD |= pin;
 4b6:	82 b3       	in	r24, 0x12	; 18
 4b8:	68 2b       	or	r22, r24
 4ba:	62 bb       	out	0x12, r22	; 18
 4bc:	08 95       	ret

000004be <mdio_setPinValue>:

/*this function is responsible for setting pin or pins for a dedicated value */
void mdio_setPinValue(u8_t port,u8_t pin,u8_t pin_value)//output
{
	/*Switching over DIO PORTs*/
	switch(port)
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	99 f0       	breq	.+38     	; 0x4e8 <mdio_setPinValue+0x2a>
 4c2:	28 f0       	brcs	.+10     	; 0x4ce <mdio_setPinValue+0x10>
 4c4:	82 30       	cpi	r24, 0x02	; 2
 4c6:	e9 f0       	breq	.+58     	; 0x502 <mdio_setPinValue+0x44>
 4c8:	83 30       	cpi	r24, 0x03	; 3
 4ca:	41 f1       	breq	.+80     	; 0x51c <mdio_setPinValue+0x5e>
 4cc:	08 95       	ret
	{
		case PORTA:
		/*switching over DIO pin status*/
			switch(pin_value)
 4ce:	44 23       	and	r20, r20
 4d0:	31 f0       	breq	.+12     	; 0x4de <mdio_setPinValue+0x20>
 4d2:	41 30       	cpi	r20, 0x01	; 1
 4d4:	79 f5       	brne	.+94     	; 0x534 <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTA |= pin;
 4d6:	8b b3       	in	r24, 0x1b	; 27
 4d8:	68 2b       	or	r22, r24
 4da:	6b bb       	out	0x1b, r22	; 27
					break;
 4dc:	08 95       	ret
			
				case LOW:
					MDIO_PORTA &= ~pin;
 4de:	8b b3       	in	r24, 0x1b	; 27
 4e0:	60 95       	com	r22
 4e2:	68 23       	and	r22, r24
 4e4:	6b bb       	out	0x1b, r22	; 27
					break;
 4e6:	08 95       	ret
			}
			break;
		
		case PORTB:
		/*switching over DIO pin status*/
			switch(pin_value)
 4e8:	44 23       	and	r20, r20
 4ea:	31 f0       	breq	.+12     	; 0x4f8 <mdio_setPinValue+0x3a>
 4ec:	41 30       	cpi	r20, 0x01	; 1
 4ee:	11 f5       	brne	.+68     	; 0x534 <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTB |= pin;
 4f0:	88 b3       	in	r24, 0x18	; 24
 4f2:	68 2b       	or	r22, r24
 4f4:	68 bb       	out	0x18, r22	; 24
					break;
 4f6:	08 95       	ret
			
				case LOW:
					MDIO_PORTB &= ~pin;
 4f8:	88 b3       	in	r24, 0x18	; 24
 4fa:	60 95       	com	r22
 4fc:	68 23       	and	r22, r24
 4fe:	68 bb       	out	0x18, r22	; 24
					break;
 500:	08 95       	ret
			}
			break;
		
		case PORTC:
		/*switching over DIO pin status*/
			switch(pin_value)
 502:	44 23       	and	r20, r20
 504:	31 f0       	breq	.+12     	; 0x512 <mdio_setPinValue+0x54>
 506:	41 30       	cpi	r20, 0x01	; 1
 508:	a9 f4       	brne	.+42     	; 0x534 <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTC |= pin;
 50a:	85 b3       	in	r24, 0x15	; 21
 50c:	68 2b       	or	r22, r24
 50e:	65 bb       	out	0x15, r22	; 21
					break;
 510:	08 95       	ret
			
				case LOW:
					MDIO_PORTC &= ~pin;
 512:	85 b3       	in	r24, 0x15	; 21
 514:	60 95       	com	r22
 516:	68 23       	and	r22, r24
 518:	65 bb       	out	0x15, r22	; 21
					break;
 51a:	08 95       	ret
			}
			break;
		
		case PORTD:
		/*switching over DIO pin status*/
			switch(pin_value)
 51c:	44 23       	and	r20, r20
 51e:	31 f0       	breq	.+12     	; 0x52c <mdio_setPinValue+0x6e>
 520:	41 30       	cpi	r20, 0x01	; 1
 522:	41 f4       	brne	.+16     	; 0x534 <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTD |= pin;
 524:	82 b3       	in	r24, 0x12	; 18
 526:	68 2b       	or	r22, r24
 528:	62 bb       	out	0x12, r22	; 18
					break;
 52a:	08 95       	ret
			
				case LOW:
					MDIO_PORTD &= ~pin;
 52c:	82 b3       	in	r24, 0x12	; 18
 52e:	60 95       	com	r22
 530:	68 23       	and	r22, r24
 532:	62 bb       	out	0x12, r22	; 18
 534:	08 95       	ret

00000536 <mspi_init>:
/************************************************************************/

void mspi_init(u8_t data_mode, u8_t clk_prescaler)
{
	/*Enable master mode, Sending MSB first and Setting data mode*/
	MSPI_SPCR = (0x10) | (data_mode << 2);
 536:	24 e0       	ldi	r18, 0x04	; 4
 538:	82 9f       	mul	r24, r18
 53a:	c0 01       	movw	r24, r0
 53c:	11 24       	eor	r1, r1
 53e:	80 61       	ori	r24, 0x10	; 16
 540:	8d b9       	out	0x0d, r24	; 13
	
	/*Check if the prescaler value is divisable by two or not*/
	if( (clk_prescaler % 2) == 0)
 542:	60 ff       	sbrs	r22, 0
	{
		/*Enable SPI double speed*/
		SET_BIT(MSPI_SPSR, 0);				
 544:	70 9a       	sbi	0x0e, 0	; 14
	{
		/*Do nothing*/
	}
	
	/*Set SPI clock*/
	MSPI_SPCR |= (clk_prescaler / 2);
 546:	8d b1       	in	r24, 0x0d	; 13
 548:	66 95       	lsr	r22
 54a:	68 2b       	or	r22, r24
 54c:	6d b9       	out	0x0d, r22	; 13
 54e:	08 95       	ret

00000550 <mspi_sendRecvByte>:
{
	/*Variable used in timing out operations*/
	u16_t timeout_var = 0;
	
	/*Enable SPI peripheral*/
	SET_BIT(MSPI_SPCR, 6);
 550:	6e 9a       	sbi	0x0d, 6	; 13
	
	/*Send master data*/
	MSPI_SPDR = data;
 552:	8f b9       	out	0x0f, r24	; 15
	
	/*Wait until data is transmitted or timeout in 10ms*/
	while( (GET_BIT(MSPI_SPSR, 7) == 0) && timeout_var < 10000)
 554:	77 99       	sbic	0x0e, 7	; 14
 556:	0a c0       	rjmp	.+20     	; 0x56c <mspi_sendRecvByte+0x1c>
 558:	80 e1       	ldi	r24, 0x10	; 16
 55a:	97 e2       	ldi	r25, 0x27	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 55c:	25 e0       	ldi	r18, 0x05	; 5
 55e:	2a 95       	dec	r18
 560:	f1 f7       	brne	.-4      	; 0x55e <mspi_sendRecvByte+0xe>
 562:	00 00       	nop
 564:	77 99       	sbic	0x0e, 7	; 14
 566:	02 c0       	rjmp	.+4      	; 0x56c <mspi_sendRecvByte+0x1c>
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	c1 f7       	brne	.-16     	; 0x55c <mspi_sendRecvByte+0xc>
		/*Delay for 1us*/
		_delay_us(1);
	}
	
	/*Disable SPI peripheral*/
	CLEAR_BIT(MSPI_SPCR, 6);
 56c:	6e 98       	cbi	0x0d, 6	; 13
	
	/*Return SPI slave data*/
	return MSPI_SPDR;
 56e:	8f b1       	in	r24, 0x0f	; 15
}
 570:	08 95       	ret

00000572 <muart_init>:
			
			timeout_var++;
			_delay_ms(1);
		}	
		/*clearing Tx flag*/
		SET_BIT(MUART_UCSRA,6);
 572:	54 9a       	sbi	0x0a, 4	; 10
 574:	53 9a       	sbi	0x0a, 3	; 10
 576:	26 e8       	ldi	r18, 0x86	; 134
 578:	20 bd       	out	0x20, r18	; 32
 57a:	89 b9       	out	0x09, r24	; 9
 57c:	90 bd       	out	0x20, r25	; 32
 57e:	08 95       	ret

00000580 <muart_reciveByte>:

/*this function is responsible for receiving the data*/
void muart_reciveByte(u8_t* data)
{
	/*Checking that there's a new data or not*/
	if(GET_BIT(MUART_UCSRA,7)==1)
 580:	5f 9b       	sbis	0x0b, 7	; 11
 582:	03 c0       	rjmp	.+6      	; 0x58a <muart_reciveByte+0xa>
	{
		/*Getting the new data*/
		*data = MUART_UDR;
 584:	2c b1       	in	r18, 0x0c	; 12
 586:	fc 01       	movw	r30, r24
 588:	20 83       	st	Z, r18
 58a:	08 95       	ret

0000058c <_exit>:
 58c:	f8 94       	cli

0000058e <__stop_program>:
 58e:	ff cf       	rjmp	.-2      	; 0x58e <__stop_program>
